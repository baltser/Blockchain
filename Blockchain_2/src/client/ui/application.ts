import { html, TemplateResult } from '../../../node_modules/lit-html/lit-html.js';
import { Message, MessageTypes } from '../../shared/messages.js';
import { Block, BlockchainNode, Transaction } from '../lib/blockchain-node.js';
import { WebsocketController } from '../lib/websocket-controller.js';
import { BlocksPanel } from './blocks-panel.js';
import { Callback, Renderable } from './common.js';
import { PendingTransactionsPanel } from './pending-transactions-panel.js';
import { TransactionForm } from './transaction-form.js';

export class Application implements Renderable<void> {
  private readonly node: BlockchainNode;
  private readonly server: WebsocketController;    //—ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ WebSocket

  // UI components:
  private readonly transactionForm = new TransactionForm(this.requestRendering);                            //   |  –ü–µ—Ä–µ–¥–∞–µ—Ç –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π
  private readonly pendingTransactionsPanel = new PendingTransactionsPanel(this.requestRendering);   //   |  –≤—ã–∑–æ–≤ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
  private readonly blocksPanel = new BlocksPanel(this.requestRendering);                                        //   |–∫–∞–∂–¥–æ–º—É UI-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É

  constructor(readonly requestRendering: Callback) {        // —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ —Å–≤–æ–π—Å–≤–µ requestRendering
    this.server = new WebsocketController(this.handleServerMessages);    //–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫  WebSocket-—Å–µ—Ä–≤–µ—Ä—É
    this.node = new BlockchainNode();                   //–≤—Å—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫—á–µ–π–Ω–∞ –∏ —É–∑–ª–æ–≤ —Ä–∞—Å—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –∑–¥–µ—Å—å

    this.requestRendering();
    this.initializeBlockchain();              //–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–ª–æ–∫—á–µ–π–Ω
  }

  private async initializeBlockchain() {
    const blocks = await this.server.requestLongestChain();       //–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –≤—Å–µ—Ö —É–∑–ª–æ–≤ –¥–ª–∏–Ω–Ω–µ–π—à—É—é —Ü–µ–ø–æ—á–∫—É
    if (blocks.length > 0) {
      this.node.initializeWith(blocks);
    } else {
      await this.node.initializeWithGenesisBlock();
    }

    this.requestRendering();
  }

  render(): TemplateResult {                  //–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã UI
    return html`
      <main>
        <h1>Blockchain node</h1>
        <aside>${this.statusLine}</aside>
        <section>${this.transactionForm.render(this.node)}</section>
        <section>
          <form @submit="${this.generateBlock}">                                                //–ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            ${this.pendingTransactionsPanel.render(this.node)}
          </form>
        </section>
        <section>${this.blocksPanel.render(this.node.chain)}</section>
      </main>
    `;
  }

  private get statusLine(): TemplateResult {
    return html`
      <p>${
        this.node.chainIsEmpty          ? '‚è≥ Initializing the blockchain...' :
        this.node.isMining              ? '‚è≥ Mining a new block...' :
        this.node.noPendingTransactions ? 'üì© Add one or more transactions.' :
                                          '‚úÖ Ready to mine a new block.'
      }</p>
    `;
  }

  private readonly generateBlock = async (event: Event): Promise<void> => {
    event.preventDefault();             //–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    // Let everyone in the network know about transactions need to be added to the blockchain.
    // Every node will try to generate a new block first for the provided transactions.
    this.server.requestNewBlock(this.node.pendingTransactions);         //—Å–æ–æ–±—â–∞–µ—Ç –≤—Å–µ–º –¥—Ä—É–≥–∏–º —É–∑–ª–∞–º —á—Ç–æ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –Ω–∞—á–∞–ª –¥–æ–±—ã—á—É
    const miningProcessIsDone = this.node.mineBlockWith(this.node.pendingTransactions);    //–Ω–∞—á–∏–Ω–∞–µ—Ç –¥–æ–±—ã—á—É –±–ª–æ–∫–∞

    // Updates status and disables forms.
    this.requestRendering();      //–æ–±–Ω–æ–≤–ª—è—Ç–µ —Å—Ç–∞—Ç—É—Å UI

    const newBlock = await miningProcessIsDone;         //–æ–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±—ã—á–∏
    this.addBlock(newBlock);                              //–¥–æ–±–∞–≤–ª—è–µ—Ç –±–ª–æ–∫ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –±–ª–æ–∫—á–µ–π–Ω
  };

  private async addBlock(block: Block, notifyOthers = true): Promise<void> {
    // The addBlock() method returns a promise that is  rejected if the block cannot be added
    // to the chain. Hence wrap the addBlock() call in the try / catch.
    try {
      await this.node.addBlock(block);
      if (notifyOthers) {
        this.server.announceNewBlock(block);
      }
    } catch (error) {
      console.log(error.message);
    }

    // Updates status, enables forms and renders the new block.
    this.requestRendering();
  }

  private readonly handleServerMessages = (message: Message) => {       //–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç WebSocket-—Å–µ—Ä–≤–µ—Ä–∞
    switch (message.type) {         //–ø–µ—Ä–µ–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–µ—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
      case MessageTypes.GetLongestChainRequest: return this.handleGetLongestChainRequest(message);
      case MessageTypes.NewBlockRequest       : return this.handleNewBlockRequest(message);
      case MessageTypes.NewBlockAnnouncement  : return this.handleNewBlockAnnouncement(message);
      default: {
        console.log(`Received message of unknown type: "${message.type}"`);
      }
    }
  }

  private handleGetLongestChainRequest(message: Message): void {        //—É–∑–µ–ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ—é —Ü–µ–ø–æ—á–∫—É —Å–µ—Ä–≤–µ—Ä—É
    this.server.send({
      type: MessageTypes.GetLongestChainResponse,
      correlationId: message.correlationId,
      payload: this.node.chain
    });
  }

  private async handleNewBlockRequest(message: Message): Promise<void> {
    const transactions = message.payload as Transaction[];
    const newBlock = await this.node.mineBlockWith(transactions);
    this.addBlock(newBlock);
  }

  private async handleNewBlockAnnouncement(message: Message): Promise<void> {
    const newBlock = message.payload as Block;
    this.addBlock(newBlock, false);
  }
}
